/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var lexer = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,12],$V2=[1,13],$V3=[14,28,29,30],$V4=[5,35],$V5=[1,23],$V6=[6,46],$V7=[2,26],$V8=[1,34],$V9=[2,8],$Va=[2,33],$Vb=[1,40],$Vc=[2,37],$Vd=[5,23,69,70,71,72,73,77,79,81,94,97,101],$Ve=[2,21],$Vf=[1,64],$Vg=[1,78],$Vh=[2,44],$Vi=[1,87],$Vj=[1,88],$Vk=[1,89],$Vl=[1,90],$Vm=[1,91],$Vn=[1,80],$Vo=[1,81],$Vp=[1,82],$Vq=[1,92],$Vr=[1,85],$Vs=[1,86],$Vt=[2,71],$Vu=[2,5],$Vv=[19,46],$Vw=[1,123],$Vx=[1,126],$Vy=[1,124],$Vz=[1,125],$VA=[1,127],$VB=[1,128],$VC=[1,135],$VD=[1,140],$VE=[1,139],$VF=[2,132],$VG=[2,136],$VH=[6,19,46,102,103,108,110,111,112,113,114,115,116,120,122],$VI=[6,19,46,102,103,108,110,111,112,113,114,115,116,120,122,126,127],$VJ=[5,17,37,69,70,71,72,73,120,122,131,132],$VK=[2,129],$VL=[2,117],$VM=[1,169],$VN=[2,30],$VO=[6,19,46,102,103,108,110,111,112,113,114,115,116],$VP=[1,204],$VQ=[2,64],$VR=[1,208],$VS=[2,88],$VT=[1,213],$VU=[2,112],$VV=[2,35],$VW=[1,232],$VX=[5,6,19,23,46,69,70,71,72,73,77,79,81,94,97,101,102,103,108,110,111,112,113,114,115,116,120,122,126,127],$VY=[1,251],$VZ=[2,105],$V_=[19,115,116],$V$=[2,91],$V01=[5,23,28,29,30,69,70,71,72,73,77,79,81,94,97,101];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"PROGRAMA":3,"program":4,"id":5,";":6,"PROG_OPT_VARS":7,"gotoMain":8,"MAIN":9,"EOF":10,"FUNCTION":11,"currentCuadCounter":12,"addDataToFunc":13,"function":14,"FUNC_TYPE":15,"insertFunc":16,"(":17,"OPT_PARAMS":18,")":19,"{":20,"FUNC_OPT_VARS":21,"ESTATUTOS":22,"}":23,"void":24,"main":25,"fillMain":26,"TYPE":27,"int":28,"float":29,"char":30,"BLOQUE":31,"vars":32,"PROG_VARS":33,"ARR_VAR_GLOBAL":34,":":35,"[":36,"CTE_I":37,"]":38,"FUNC_VARS":39,"insertGlobalVar":40,"LISTAS_IDS_PROG":41,"insertGlobalMultVar":42,"insertLocalVar":43,"LISTAS_IDS_FUNC":44,"insertLocalMultVar":45,",":46,"PARAMS":47,"getParamType":48,"insertParamAsVar":49,"MULT_PARAMS":50,"ESTATUTO":51,"ASIGNACION":52,"LLAMADA":53,"RETURN":54,"READ":55,"WRITE":56,"CONDITION":57,"WHILE":58,"FOR":59,"=":60,"EXP":61,"genERA":62,"CALL_PARAMS":63,"LANGUAGE_SPECIFIC_FUNCS":64,"resetParamCounter":65,"LANGUAGE_SPECIFIC_PARAMS":66,"ARR_ID_PARAM":67,"MULT_LANGUAGE_SPECIFIC_PARAMS":68,"mean":69,"mode":70,"variance":71,"linearRegression":72,"plotXY":73,"generatePARAM":74,"MULT_EXPRESSION":75,"validateNoMoreParams":76,"return":77,"returnStmt":78,"read":79,"assignReadVal":80,"write":81,"WRITE_TYPE":82,"addWriteCuad":83,"MULT_WRITE":84,"CTE_S":85,"stringWriteStmt":86,"arrWriteStmt":87,"arrIdWriteStmt":88,"CONDITION_IF":89,"CONDITION_IF_ELSE":90,"fill":91,"addIf":92,"addElse":93,"if":94,"EXPRESSION":95,"else":96,"while":97,"whileStmtMarkStart":98,"whileStmt":99,"endWhileStmt":100,"for":101,"to":102,"do":103,"EXPRESSION_COND":104,"EXPRESSION_CONJ":105,"validarCond":106,"EXPRESSION_TYPE":107,"<=":108,"addCondOper":109,">=":110,"<":111,">":112,"==":113,"!=":114,"&":115,"|":116,"TERM":117,"semanticCreateCuadSumRes":118,"EXP_TYPE":119,"+":120,"addOper":121,"-":122,"FACTOR":123,"semanticCreateCuadMultDiv":124,"TERM_TYPE":125,"*":126,"/":127,"VAR_CTE":128,"beginParenthesis":129,"popPar":130,"CTE_F":131,"CTE_C":132,"$accept":0,"$end":1},
terminals_: {2:"error",4:"program",5:"id",6:";",10:"EOF",14:"function",17:"(",19:")",20:"{",23:"}",24:"void",25:"main",28:"int",29:"float",30:"char",32:"vars",35:":",36:"[",37:"CTE_I",38:"]",46:",",60:"=",69:"mean",70:"mode",71:"variance",72:"linearRegression",73:"plotXY",77:"return",79:"read",81:"write",85:"CTE_S",94:"if",96:"else",97:"while",101:"for",102:"to",103:"do",108:"<=",110:">=",111:"<",112:">",113:"==",114:"!=",115:"&",116:"|",120:"+",122:"-",126:"*",127:"/",131:"CTE_F",132:"CTE_C"},
productions_: [0,[3,7],[3,8],[8,0],[12,0],[13,0],[11,12],[11,13],[16,0],[9,10],[26,0],[15,1],[15,1],[27,1],[27,1],[27,1],[31,3],[7,2],[7,0],[34,7],[21,2],[21,0],[33,7],[33,6],[33,2],[33,1],[40,0],[42,0],[39,7],[39,6],[43,0],[45,0],[41,4],[41,0],[44,4],[44,0],[18,1],[18,0],[47,6],[48,0],[49,0],[50,2],[50,0],[22,2],[22,0],[51,1],[51,2],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[52,4],[52,3],[52,7],[52,7],[52,7],[53,5],[53,5],[65,0],[66,2],[66,0],[68,3],[68,0],[67,1],[64,1],[64,1],[64,1],[64,1],[64,1],[62,0],[63,2],[63,1],[54,6],[78,0],[55,6],[80,0],[56,5],[82,3],[82,3],[82,6],[82,6],[86,0],[88,0],[87,0],[83,0],[84,2],[84,0],[57,1],[57,1],[91,0],[92,0],[93,0],[89,7],[90,10],[58,8],[98,0],[99,0],[100,0],[59,8],[95,4],[95,1],[95,1],[104,4],[106,0],[107,2],[107,2],[107,2],[107,2],[107,2],[107,2],[109,0],[105,2],[105,2],[75,3],[75,1],[76,0],[74,1],[61,4],[61,2],[118,0],[119,2],[119,2],[117,4],[117,2],[124,0],[125,2],[125,2],[121,0],[123,2],[123,1],[123,1],[123,5],[129,0],[130,0],[128,1],[128,1],[128,1],[128,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		funcTable.insertFunc({type: "program", name:$$[$0-5], varTable: globalVarTable})
		codigo.endProc();
		return {
			cuads: codigo.cuadruplos.getCuads(),
			funcTable: funcTable.funcTable,
			globalVarTable: globalVarTable.varsTable,
			constantes: mm.mapaCTE,
			local: mm.mapaLocal,
			global: mm.mapaGlobal,
			temp: mm.mapaTemp
		}
	
break;
case 2:

		funcTable.insertFunc({type: "program", name:$$[$0-6], varTable: globalVarTable})
		codigo.endProc();
		// console.log(mm);
		//console.log(codigo.cuadruplos.getCuads());
		//console.log(funcTable.funcTable["fiboIter"].varTable);
		// console.log(globalVarTable.varsTable);
		//console.log(mm.mapaCTE);
		// console.log();
		return {
			cuads: codigo.cuadruplos.getCuads(),
			funcTable: funcTable.funcTable,
			globalVarTable: globalVarTable.varsTable,
			constantes: mm.mapaCTE,
			local: mm.mapaLocal,
			global: mm.mapaGlobal,
			temp: mm.mapaTemp
		}
	
break;
case 3:

		codigo.gotoMain();
	
break;
case 4:

		cuadCounter = codigo.cuadruplos.counter;
	
break;
case 5:

		cuadCounter = codigo.cuadruplos.counter;
		funcTable.addToFunc($$[$0-4], {type: $$[$0-7], name:$$[$0-6], varTable: varT, varCounter: funcVarCounter, paramCounter: funcParamCounter, firstCuad: cuadCounter})
	
break;
case 6: case 7:

		varT = new tablaVariables();
		funcVarCounter = 0;
		funcParamCounter = 0;
		codigo.endFunc();
	
break;
case 8:

		funcTable.insertFunc({type: $$[$0-1], name:$$[$0], varTable: varT, varCounter: funcVarCounter, paramCounter: funcParamCounter, firstCuad: cuadCounter})
	
break;
case 9:

		funcTable.insertFunc({type: $$[$0-8], name:$$[$0-7], varTable: varT, varCounter: funcVarCounter, paramCounter: funcParamCounter, firstCuad: cuadCounter, varUpperLimit: pointerLocal})
		varT = new tablaVariables();
		funcVarCounter = 0;
		funcParamCounter = 0;
		codigo.endFunc();
	
break;
case 10:

		codigo.fillMain();
	
break;
case 19:

		globalPointerArr = mm.getArrGlobalPointers($$[$0-6], $$[$0-2]);
		let arrayTemp = []
		for(let i = 0; i < globalPointerArr.length; i++){
			mm.inserGlobal(globalPointerArr[i], $$[$0-6], $$[$0-4], '');
			arrayTemp[i] = globalPointerArr[i]
			//console.log(mm.mapaGlobal)
		}
		//console.log("THIS" , $$[$0-4], $$[$0-6], globalPointerArr)
		globalVarTable.insertVar($$[$0-4], {tipo: $$[$0-6], dir: arrayTemp});
		//console.log("GLOBAL",globalVarTable.varsTable)
	
break;
case 22: case 28: case 29:


	
break;
case 23:

	
break;
case 26:

		tipoVar = $$[$0-2]
		pointerGlobal = mm.getCurrentGlobalPointer($$[$0-2]);
		mm.inserGlobal(pointerGlobal, $$[$0-2], $$[$0], '');
		globalVarTable.insertVar($$[$0], {tipo: $$[$0-2], dir: pointerGlobal})
	
break;
case 27:

		pointerGlobal = mm.getCurrentGlobalPointer(tipoVar);
		mm.inserGlobal(pointerGlobal, tipoVar, $$[$0], '');
		globalVarTable.insertVar($$[$0], {tipo: tipoVar, dir: pointerGlobal})
	
break;
case 30:

		tipoVar = $$[$0-2]
		pointerLocal = mm.getCurrentLocalPointer(tipoVar);
		mm.inserLocal(pointerLocal, tipoVar, $$[$0], '')
		varT.insertVar($$[$0], {tipo: tipoVar, dir: pointerLocal})
		funcVarCounter += 1;
	
break;
case 31:

		pointerLocal = mm.getCurrentLocalPointer(tipoVar);
		mm.inserLocal(pointerLocal, tipoVar, $$[$0], '');
		varT.insertVar($$[$0], {tipo: tipoVar, dir: pointerLocal})
		funcVarCounter += 1;
	
break;
case 39:


		tipoParam = $$[$0];
		pointerLocal = mm.getCurrentLocalPointer($$[$0]);
		//console.log("got pointer",pointerLocal)
	
break;
case 40:

		// console.log("inser", pointerLocal, $$[$0], '')
		mm.inserLocal(pointerLocal, $$[$0-3], $$[$0], '')
		varT.insertVar($$[$0], {tipo: tipoParam, dir: pointerLocal})
		// console.log("varT", varT.varsTable)
		funcParamCounter+=1;
	
break;
case 53:


		readLocal = varT.getVar($$[$0-3]);
		readGlobal = globalVarTable.getVar($$[$0-3])
		let readType;
		let readMemoria;
		if(readLocal != undefined){
			// console.log("metiendo a memoria local")
			// mm.updateLocal(readLocal.tipo, readLocal.dir, $$[$0-1])
			// readMemoria = mm.getMapaLocal(readLocal.tipo)
			// console.log(readMemoria)
			codigo.addOperando(readLocal.dir, readLocal.tipo)
		}else if(readGlobal != undefined){
			// mm.updateGlobal(readGlobal.tipo, readGlobal.dir, $$[$0-1])
			// readMemoria = mm.getMapaGlobal(readGlobal.tipo)
			// console.log(readMemoria)
			codigo.addOperando(readGlobal.dir, readGlobal.tipo)
		}
		codigo.addOperador($$[$0-2])
		codigo.asignStmt()
	
break;
case 55:


		readGlobal = globalVarTable.getVar($$[$0-6]);
		codigo.addOperando(readGlobal.dir, readGlobal.tipo)
		codigo.addOperador($$[$0-2])

		readGlobal = globalVarTable.getVar($$[$0-4]);
		readLocal = varT.getVar($$[$0-4]);

		if(readLocal != undefined){
			codigo.asignArrStmt(readLocal.dir)
		}else if(readGlobal != undefined){
			codigo.asignArrStmt(readGlobal.dir)
		}
	
break;
case 56:

		readGlobal = globalVarTable.getVar(`${$$[$0-6]}`);
		pointerConst = mm.getCurrentCTEPointer('int')
		mm.inserConst(pointerConst, 'int', '', $$[$0-4])
		codigo.addOperando(readGlobal.dir, readGlobal.tipo)
		codigo.addOperador($$[$0-2])
		codigo.asignArrStmt(pointerConst)
	
break;
case 57:


		readGlobal = globalVarTable.getVar($$[$0-6]);
		readLocal = varT.getVar($$[$0-6]);

		if(readLocal != undefined){
			codigo.addOperando(readLocal.dir, readLocal.tipo)
			codigo.addOperador($$[$0-5])
			
		}else if(readGlobal != undefined){
			codigo.addOperando(readGlobal.dir, readGlobal.tipo)
			codigo.addOperador($$[$0-5])
		}
		
		readGlobal = globalVarTable.getVar($$[$0-4]);
		codigo.addOperando(readGlobal.dir, readGlobal.tipo)

		readGlobal = globalVarTable.getVar($$[$0-2]);
		codigo.asignToArrStmt(readGlobal.dir)
		
	
break;
case 58:

		codigo.goSub(funcCalled.name, funcCalled.type, mm.mapaTemp);
	
break;
case 59:

	
		codigo.generarGotoLlamadaSpecifica($$[$0-4], callParamCounter)
	
break;
case 60:

		callParamCounter = 0;
	
break;
case 65:

		//console.log($$[$0])
		callParamCounter+=1;
		arrGlobalId = globalVarTable.getVar($$[$0])
		codigo.addOperando(arrGlobalId.dir, arrGlobalId.tipo);
		//console.log(globalVarTable.varsTable);

	
break;
case 71:

		funcCalled = funcTable.getFunc($$[$0])
		codigo.genEra($$[$0])
		funcParamCounter = funcCalled.paramCounter;
		callParamCounter = 1;
		//console.log("funcion", funcCalled.name, "con par", funcParamCounter)
	
break;
case 75:

		codigo.returnStmt()
	
break;
case 77:

		readLocal = varT.getVar($$[$0]);
		readGlobal = globalVarTable.getVar($$[$0])
		// let readType;
		// let readMemoria;
		if(readLocal != undefined){
			// readMemoria = mm.getMapaLocal(readLocal.tipo)
			// // mm.updateLocal(readLocal.tipo, readLocal.dir,input )
			codigo.addOperando(readLocal.dir, readLocal.tipo)
		}else if(readGlobal != undefined){
			codigo.addOperando(readGlobal.dir, readGlobal.tipo)
		}
		codigo.readStmt()
	
break;
case 83:

		pointerConst = mm.getCurrentCTEPointer('string');
		mm.inserConst(pointerConst, 'string', '', $$[$0])
		codigo.addOperando(pointerConst, 'string');
		codigo.writeStmt()
	
break;
case 84:

		readGlobal = globalVarTable.getVar(`${$$[$0-3]}`);
		codigo.addOperando(readGlobal.dir, readGlobal.tipo)

		readGlobal = globalVarTable.getVar($$[$0-1]);
		readLocal = varT.getVar($$[$0-1]);

		if(readLocal != undefined){
			codigo.addOperando(readLocal.dir, 'int');
			codigo.arrWriteStmt()
		}else if(readGlobal != undefined){
			codigo.addOperando(readGlobal.dir, 'int');
			codigo.arrWriteStmt()
		}

	
break;
case 85:

		readGlobal = globalVarTable.getVar(`${$$[$0-3]}`);
		codigo.addOperando(readGlobal.dir, readGlobal.tipo)
		pointerConst = mm.getCurrentCTEPointer('int');
		mm.inserConst(pointerConst, 'int', '', $$[$0-1])
		codigo.addOperando(pointerConst, 'int');
		codigo.arrWriteStmt()
	
break;
case 86:

		codigo.writeStmt()
	
break;
case 91:

		codigo.fill_ifStmt()
	
break;
case 92:

		codigo.ifStmt()
	
break;
case 93:

		codigo.elseStmt()
	
break;
case 97:
codigo.whileStmtMarkStart()
break;
case 98:
codigo.whileStmt()
break;
case 99:
codigo.endWhileStmt()
break;
case 105:

		codigo.validarCond(mm.mapaTemp)
		//console.log(mm.mapaTemp)
	
break;
case 112:

		codigo.addOperador($$[$0])
	
break;
case 117:

		if(callParamCounter != funcParamCounter+1){
			throw new Error(`Error, llamada a funcion ${funcCalled.name} no cuenta con el numero de parametros correctos`)
		}
	
break;
case 118:

		codigo.generateParam(mm.mapaTemp)
		// console.log(callParamCounter)
		callParamCounter+=1;
	
break;
case 121:

		let res = codigo.validarSumaResta(mm.mapaTemp)
	
break;
case 126:

		codigo.validarMultDiv(mm.mapaTemp)
	
break;
case 129:

		codigo.addOperador($$[$0]);
	
break;
case 134:
codigo.addOperador($$[$0])
break;
case 135:
codigo.consumeOperador()
break;
case 136:

		readLocal = varT.getVar($$[$0]);
		// console.log(readLocal)
		readGlobal = globalVarTable.getVar($$[$0]);
		// console.log(readGlobal)
		let temp;
		if(readLocal != undefined){
			temp = readLocal.tipo;
			codigo.addOperando(readLocal.dir, readLocal.tipo);
		}
		else if(readGlobal != undefined){
			temp = readGlobal.tipo;
			codigo.addOperando(readGlobal.dir, readGlobal.tipo);
		}
		else{
			throw new Error (`var no declarada ${$$[$0]}`)
		}

		
	
break;
case 137:

		pointerConst = mm.getCurrentCTEPointer('int')
		mm.inserConst(pointerConst, 'int', '', $$[$0])
		codigo.addOperando(pointerConst, 'int');

	
break;
case 138:

		pointerConst = mm.getCurrentCTEPointer('float')
		mm.inserConst(pointerConst, 'float', '', $$[$0])
		codigo.addOperando(pointerConst, 'float');
	
break;
case 139:

		pointerConst = mm.getCurrentCTEPointer('char')
		mm.inserConst(pointerConst, 'char', '', $$[$0])
		codigo.addOperando(pointerConst, 'char');
	
break;
}
},
table: [{3:1,4:[1,2]},{1:[3]},{5:[1,3]},{6:[1,4]},{7:5,14:[2,18],32:[1,6]},{8:7,14:[2,3]},{27:9,28:$V0,29:$V1,30:$V2,33:8,34:10},{9:14,11:15,14:[1,16]},{14:[2,17],27:17,28:$V0,29:$V1,30:$V2,34:18},{35:[1,19]},o($V3,[2,25]),o($V4,[2,13]),o($V4,[2,14]),o($V4,[2,15]),{10:[1,20]},{9:21,14:[1,22]},{15:24,24:$V5,27:25,28:$V0,29:$V1,30:$V2},{35:[1,26]},o($V3,[2,24]),{5:[1,27]},{1:[2,1]},{10:[1,28]},{15:29,24:$V5,27:25,28:$V0,29:$V1,30:$V2},{5:[2,11],25:[1,30]},{5:[1,31]},{5:[2,12]},{5:[1,32]},o($V6,$V7,{40:33,36:$V8}),{1:[2,2]},{5:[1,35]},{17:[2,10],26:36},{16:37,17:$V9},o($V6,$V7,{40:38,36:$V8}),{6:$Va,41:39,46:$Vb},{37:[1,41]},{16:42,17:$V9},{17:[1,43]},{17:[1,44]},{6:$Va,41:45,46:$Vb},{6:[1,46]},{5:[1,47]},{38:[1,48]},{17:[1,49]},{19:[1,50]},{18:51,19:$Vc,27:53,28:$V0,29:$V1,30:$V2,47:52},{6:[1,54]},o($V3,[2,23]),o($V6,[2,27],{42:55}),{6:[1,56]},{18:57,19:$Vc,27:53,28:$V0,29:$V1,30:$V2,47:52},{20:[1,58]},{19:[1,59]},{19:[2,36]},{35:[2,39],48:60},o($V3,[2,22]),{6:$Va,41:61,46:$Vb},o($V3,[2,19]),{19:[1,62]},o($Vd,$Ve,{21:63,32:$Vf}),{20:[1,65]},{35:[1,66]},{6:[2,32]},{20:[1,67]},{5:$Vg,22:68,23:$Vh,51:69,52:70,53:71,54:72,55:73,56:74,57:75,58:76,59:77,64:79,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,77:$Vn,79:$Vo,81:$Vp,89:83,90:84,94:$Vq,97:$Vr,101:$Vs},{27:94,28:$V0,29:$V1,30:$V2,39:93},o($Vd,$Ve,{21:95,32:$Vf}),{5:[1,96]},o($Vd,$Ve,{21:97,32:$Vf}),{23:[1,98]},{5:$Vg,22:99,23:$Vh,51:69,52:70,53:71,54:72,55:73,56:74,57:75,58:76,59:77,64:79,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,77:$Vn,79:$Vo,81:$Vp,89:83,90:84,94:$Vq,97:$Vr,101:$Vs},o($Vd,[2,45]),{6:[1,100]},o($Vd,[2,47]),o($Vd,[2,48]),o($Vd,[2,49]),o($Vd,[2,50]),o($Vd,[2,51]),o($Vd,[2,52]),{17:$Vt,36:[1,102],60:[1,101],62:103},{17:[1,104]},{17:[1,105]},{17:[1,106]},{17:[1,107]},o($Vd,[2,89]),o($Vd,[2,90]),{17:[2,97],98:108},{5:[1,109]},{17:[2,66]},{17:[2,67]},{17:[2,68]},{17:[2,69]},{17:[2,70]},{17:[1,110]},o($Vd,[2,20],{27:111,28:$V0,29:$V1,30:$V2}),{35:[1,112]},o($Vd,$Vu,{13:113}),o($Vv,[2,40],{49:114}),o($Vd,$Vu,{13:115}),{10:[2,9]},{23:[2,43]},o($Vd,[2,46]),{5:[1,118],17:$Vw,37:$Vx,53:117,61:116,64:79,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,117:119,119:121,120:$Vy,122:$Vz,123:120,128:122,131:$VA,132:$VB},{5:[1,129],37:[1,130]},{17:[1,131]},o([5,19],[2,60],{65:132}),{5:$VC,17:$Vw,37:$Vx,53:134,61:133,64:79,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,117:119,119:121,120:$Vy,122:$Vz,123:120,128:122,131:$VA,132:$VB},{5:[1,136]},{5:$VD,17:$Vw,37:$Vx,53:134,61:138,64:79,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,82:137,85:$VE,117:119,119:121,120:$Vy,122:$Vz,123:120,128:122,131:$VA,132:$VB},{17:[1,141]},{60:[1,142]},{5:$VC,17:$Vw,37:$Vx,53:134,61:145,64:79,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,95:143,104:144,117:119,119:121,120:$Vy,122:$Vz,123:120,128:122,131:$VA,132:$VB},{35:[1,146]},{5:[1,147]},{5:$Vg,22:148,23:$Vh,51:69,52:70,53:71,54:72,55:73,56:74,57:75,58:76,59:77,64:79,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,77:$Vn,79:$Vo,81:$Vp,89:83,90:84,94:$Vq,97:$Vr,101:$Vs},{19:[2,42],46:[1,150],50:149},{5:$Vg,22:151,23:$Vh,51:69,52:70,53:71,54:72,55:73,56:74,57:75,58:76,59:77,64:79,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,77:$Vn,79:$Vo,81:$Vp,89:83,90:84,94:$Vq,97:$Vr,101:$Vs},{6:[1,152]},o($Vd,[2,54],{6:$VF,120:$VF,122:$VF,126:$VF,127:$VF}),o([6,120,122,126,127],$VG,{62:103,17:$Vt,36:[1,153]}),o($VH,[2,121],{118:154}),o($VI,[2,126],{124:155}),{5:[1,157],37:$Vx,128:156,131:$VA,132:$VB},o($VI,[2,131]),o($VJ,[2,134],{129:158}),o($VJ,$VK,{121:159}),o($VJ,$VK,{121:160}),o($VI,[2,137]),o($VI,[2,138]),o($VI,[2,139]),{38:[1,161]},{38:[1,162]},{5:$VC,17:$Vw,19:$VL,37:$Vx,53:134,61:166,63:163,64:79,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:164,76:165,117:119,119:121,120:$Vy,122:$Vz,123:120,128:122,131:$VA,132:$VB},{5:$VM,19:[2,62],66:167,67:168},{19:[1,170]},o($VI,$VF),o($VI,$VG,{62:103,17:$Vt}),{19:[2,77],80:171},{19:[1,172]},o($Vv,[2,86],{83:173}),o($Vv,[2,83],{86:174}),o([19,46,120,122,126,127],$VG,{62:103,17:$Vt,36:[1,175]}),{5:$VC,17:$Vw,37:$Vx,53:134,61:145,64:79,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,95:176,104:144,117:119,119:121,120:$Vy,122:$Vz,123:120,128:122,131:$VA,132:$VB},{5:$VC,17:$Vw,37:$Vx,53:134,61:177,64:79,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,117:119,119:121,120:$Vy,122:$Vz,123:120,128:122,131:$VA,132:$VB},{19:[1,178]},{19:[2,102],105:179,115:[1,180],116:[1,181]},{19:[2,103],107:182,108:[1,183],110:[1,184],111:[1,185],112:[1,186],113:[1,187],114:[1,188]},{5:[1,189]},o($V6,$VN,{43:190}),{23:[1,191]},{19:[2,38]},{27:53,28:$V0,29:$V1,30:$V2,47:192},{23:[1,193]},o($Vd,[2,53]),{5:[1,194]},o($VO,[2,120],{119:195,120:$Vy,122:$Vz}),o($VH,[2,125],{125:196,126:[1,197],127:[1,198]}),o($VI,[2,130]),o($VI,$VG),{5:$VC,17:$Vw,37:$Vx,53:134,61:199,64:79,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,117:119,119:121,120:$Vy,122:$Vz,123:120,128:122,131:$VA,132:$VB},o($VJ,[2,122]),o($VJ,[2,123]),{60:[1,200]},{60:[1,201]},{19:[1,202]},{19:$VL,46:$VP,75:203,76:205},{19:[2,73]},o($Vv,[2,118]),{19:[1,206]},{19:$VQ,46:$VR,68:207},o($Vv,[2,65]),{6:[1,209]},{19:[1,210]},{6:[1,211]},{19:$VS,46:$VT,84:212},{19:$VS,46:$VT,84:214},{5:[1,216],37:[1,215]},{19:[1,217]},{102:[1,218]},{20:[2,92],92:219},{5:$VC,17:$Vw,37:$Vx,53:134,61:145,64:79,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,95:220,104:144,117:119,119:121,120:$Vy,122:$Vz,123:120,128:122,131:$VA,132:$VB},o($VJ,$VU,{109:221}),o($VJ,$VU,{109:222}),{5:$VC,17:$Vw,37:$Vx,53:134,61:223,64:79,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,117:119,119:121,120:$Vy,122:$Vz,123:120,128:122,131:$VA,132:$VB},o($VJ,$VU,{109:224}),o($VJ,$VU,{109:225}),o($VJ,$VU,{109:226}),o($VJ,$VU,{109:227}),o($VJ,$VU,{109:228}),o($VJ,$VU,{109:229}),o($V6,$VN,{43:230}),{6:$VV,44:231,46:$VW},{14:[2,6]},{19:[2,41]},{14:[2,7]},{38:[1,233]},{5:$VC,17:$Vw,37:$Vx,53:134,61:234,64:79,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,117:119,119:121,120:$Vy,122:$Vz,123:120,128:122,131:$VA,132:$VB},{5:$VC,17:$Vw,37:$Vx,53:134,64:79,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,117:235,119:121,120:$Vy,122:$Vz,123:120,128:122,131:$VA,132:$VB},o($VJ,$VK,{121:236}),o($VJ,$VK,{121:237}),{19:[2,135],130:238},{5:$VC,17:$Vw,37:$Vx,53:134,61:239,64:79,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,117:119,119:121,120:$Vy,122:$Vz,123:120,128:122,131:$VA,132:$VB},{5:$VC,17:$Vw,37:$Vx,53:134,61:240,64:79,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,117:119,119:121,120:$Vy,122:$Vz,123:120,128:122,131:$VA,132:$VB},o($VX,[2,58]),{19:[2,72]},{5:$VC,17:$Vw,37:$Vx,53:134,61:166,64:79,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:241,117:119,119:121,120:$Vy,122:$Vz,123:120,128:122,131:$VA,132:$VB},{19:[2,116]},o($VX,[2,59]),{19:[2,61]},{5:$VM,67:242},o($Vd,[2,75],{78:243}),{6:[1,244]},o($Vd,[2,78]),{19:[2,79]},{5:$VD,17:$Vw,37:$Vx,53:134,61:138,64:79,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,82:245,85:$VE,117:119,119:121,120:$Vy,122:$Vz,123:120,128:122,131:$VA,132:$VB},{19:[2,80]},{38:[1,246]},{38:[1,247]},{20:[2,98],99:248},{5:$VC,17:$Vw,37:$Vx,53:134,61:249,64:79,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,117:119,119:121,120:$Vy,122:$Vz,123:120,128:122,131:$VA,132:$VB},{20:$VY,31:250},{19:$VZ,106:252},o($VJ,[2,113]),o($VJ,[2,114]),o($V_,$VZ,{106:253}),o($VJ,[2,106]),o($VJ,[2,107]),o($VJ,[2,108]),o($VJ,[2,109]),o($VJ,[2,110]),o($VJ,[2,111]),{6:$VV,44:254,46:$VW},{6:[1,255]},{5:[1,256]},{6:[1,257]},o($VO,[2,119]),o($VH,[2,124]),o($VJ,[2,127]),o($VJ,[2,128]),{19:[1,258]},{6:[1,259]},{6:[1,260]},{19:$VL,46:$VP,75:261,76:205},{19:$VQ,46:$VR,68:262},o($Vd,[2,74]),o($Vd,[2,76]),{19:[2,87]},o($Vv,[2,85],{87:263}),o($Vv,[2,84],{88:264}),{20:$VY,31:265},{103:[1,266]},o($Vd,$V$,{91:267,96:[1,268]}),{5:$Vg,22:269,23:$Vh,51:69,52:70,53:71,54:72,55:73,56:74,57:75,58:76,59:77,64:79,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,77:$Vn,79:$Vo,81:$Vp,89:83,90:84,94:$Vq,97:$Vr,101:$Vs},{19:[2,101]},o($V_,[2,104]),{6:[1,270]},o($V01,[2,29]),o($V6,[2,31],{45:271}),o($Vd,[2,57]),o($VI,[2,133]),o($Vd,[2,55]),o($Vd,[2,56]),{19:[2,115]},{19:[2,63]},{19:$VS,46:$VT,84:272},{19:$VS,46:$VT,84:273},o($Vd,[2,99],{100:274}),{20:$VY,31:275},o($Vd,[2,94]),{20:[2,93],93:276},{23:[1,277]},o($V01,[2,28]),{6:$VV,44:278,46:$VW},{19:[2,81]},{19:[2,82]},o($Vd,[2,96]),o($Vd,[2,100]),{20:$VY,31:279},o([5,23,69,70,71,72,73,77,79,81,94,96,97,101],[2,16]),{6:[2,34]},o($Vd,$V$,{91:280}),o($Vd,[2,95])],
defaultActions: {20:[2,1],25:[2,12],28:[2,2],52:[2,36],61:[2,32],87:[2,66],88:[2,67],89:[2,68],90:[2,69],91:[2,70],98:[2,9],99:[2,43],149:[2,38],165:[2,73],191:[2,6],192:[2,41],193:[2,7],203:[2,72],205:[2,116],207:[2,61],212:[2,79],214:[2,80],245:[2,87],252:[2,101],261:[2,115],262:[2,63],272:[2,81],273:[2,82],278:[2,34]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


const codigoInt = require('./codigoInt')
const cuadruplos = require("./cuadruplos");
const manejadorMemoria = require('./manejadorMemoria');
const directorioProcedimientos = require('./directorioProcedimientos'); 
const tablaVariables = require('./tablaVariables'); 
const mapaMemoria = require('./tablaVariables'); 

	
//variables usadas en jison lexer
let codigo = new codigoInt();
let mm = new manejadorMemoria();
let funcTable = new directorioProcedimientos();
let varT = new tablaVariables();
let globalVarTable = new tablaVariables();

let pointerGlobal;
let pointerLocal;
let pointerConst;
let tipoParam;
let tipoVar;
let funcVarCounter = 0;
let funcParamCounter = 0;
let cuadCounter = 0;
let callParamCounter = 1;
let funcCalled;
let readLocal;
let readGlobal;
let localPointerArr;
let globalPointerArr;

let arrGlobalId;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 6;
break;
case 1:return 35;
break;
case 2:return 46;
break;
case 3:return 17;
break;
case 4:return 19;
break;
case 5:return 20;
break;
case 6:return 23;
break;
case 7:return 36;
break;
case 8:return 38;
break;
case 9:return 120;
break;
case 10:return 122;
break;
case 11:return 126;
break;
case 12:return 127;
break;
case 13:return 110;
break;
case 14:return 108;
break;
case 15:return 112;
break;
case 16:return 111;
break;
case 17:return 114;
break;
case 18:return 113;
break;
case 19:return 60;
break;
case 20:return 115;
break;
case 21:return 116;
break;
case 22:
break;
case 23:
break;
case 24:return "vars"
break;
case 25:return "program"
break;
case 26:return "read"
break;
case 27:return "write"
break;
case 28:return "function"
break;
case 29:return "return"
break;
case 30:return "int"
break;
case 31:return "float"
break;
case 32:return "char"
break;
case 33:return "void"
break;
case 34:return "print"
break;
case 35:return "if"
break;
case 36:return "else"
break;
case 37:return "for"
break;
case 38:return "to"
break;
case 39:return "do"
break;
case 40:return "while"
break;
case 41:return "main"
break;
case 42:return "mean"
break;
case 43:return "mode"
break;
case 44:return "variance"
break;
case 45:return "linearRegression"
break;
case 46:return "plotXY"
break;
case 47:return 5 
break;
case 48:return 131;
break;
case 49:return 37;
break;
case 50:return 132;
break;
case 51:return 85;
break;
case 52:return 10;
break;
case 53: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:!=)/,/^(?:==)/,/^(?:=)/,/^(?:&)/,/^(?:\|)/,/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:vars\b)/,/^(?:program\b)/,/^(?:read\b)/,/^(?:write\b)/,/^(?:function\b)/,/^(?:return\b)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:char\b)/,/^(?:void\b)/,/^(?:print\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:to\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:main\b)/,/^(?:mean\b)/,/^(?:mode\b)/,/^(?:variance\b)/,/^(?:linearRegression\b)/,/^(?:plotXY\b)/,/^(?:[a-zA-Z][a-zA-Z_0-9]*\b)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:'[a-zA-Z]')/,/^(?:"(\\.|[^\"])*")/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = lexer;
exports.Parser = lexer.Parser;
exports.parse = function () { return lexer.parse.apply(lexer, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}