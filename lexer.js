/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var lexer = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,11],$V2=[1,12],$V3=[5,33],$V4=[1,21],$V5=[13,23,24,25],$V6=[2,26],$V7=[2,4],$V8=[1,51],$V9=[5,29,56,58,60,70,72,76],$Va=[17,35],$Vb=[1,68],$Vc=[2,33],$Vd=[1,69],$Ve=[1,70],$Vf=[1,71],$Vg=[1,76],$Vh=[1,74],$Vi=[1,75],$Vj=[1,85],$Vk=[1,98],$Vl=[1,103],$Vm=[1,104],$Vn=[1,105],$Vo=[1,106],$Vp=[1,107],$Vq=[1,108],$Vr=[1,115],$Vs=[2,100],$Vt=[2,43],$Vu=[6,17,35],$Vv=[1,130],$Vw=[1,131],$Vx=[6,17,35,77,78,82,84,85,86,87,88,89,90,94,96,100,101],$Vy=[2,104],$Vz=[6,17,35,77,78,82,84,85,86,87,88,89,90,94,96],$VA=[5,15,94,96,105,106,107],$VB=[2,97],$VC=[2,57],$VD=[1,146],$VE=[2,81],$VF=[6,17,35,77,78,82,84,85,86,87,88,89,90],$VG=[2,86],$VH=[5,23,24,25,29,56,58,60,70,72,76],$VI=[2,85],$VJ=[1,184],$VK=[2,60];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"PROGRAMA":3,"program":4,"id":5,";":6,"PROG_OPT_VARS":7,"gotoMain":8,"MAIN":9,"EOF":10,"FUNCTION":11,"currentCuadCounter":12,"function":13,"FUNC_TYPE":14,"(":15,"OPT_PARAMS":16,")":17,"BLOQUE":18,"void":19,"main":20,"fillMain":21,"TYPE":22,"int":23,"float":24,"char":25,"{":26,"FUNC_OPT_VARS":27,"ESTATUTOS":28,"}":29,"vars":30,"PROG_VARS":31,"FUNC_VARS":32,":":33,"LISTAS_IDS":34,",":35,"PARAMS":36,"getParamType":37,"insertParamAsVar":38,"MULT_PARAMS":39,"ESTATUTO":40,"ASIGNACION":41,"LLAMADA":42,"RETURN":43,"READ":44,"WRITE":45,"CONDITION":46,"WHILE":47,"FOR":48,"=":49,"EXPRESSION":50,"genERA":51,"CALL_PARAMS":52,"EXP":53,"generatePARAM":54,"MULT_EXPRESSION":55,"return":56,"returnStmt":57,"read":58,"assignReadVal":59,"write":60,"WRITE_TYPE":61,"addWriteCuad":62,"MULT_WRITE":63,"CTE_S":64,"CONDITION_IF":65,"CONDITION_IF_ELSE":66,"fill":67,"addIf":68,"addElse":69,"if":70,"else":71,"while":72,"whileStmtMarkStart":73,"whileStmt":74,"endWhileStmt":75,"for":76,"to":77,"do":78,"EXPRESSION_TYPE":79,"EXPRESSION_CONJ":80,"validarCond":81,"<=":82,"addCondOper":83,">=":84,"<":85,">":86,"==":87,"!=":88,"&":89,"|":90,"TERM":91,"semanticCreateCuadSumRes":92,"EXP_TYPE":93,"+":94,"addOper":95,"-":96,"FACTOR":97,"semanticCreateCuadMultDiv":98,"TERM_TYPE":99,"*":100,"/":101,"VAR_CTE":102,"beginParenthesis":103,"popPar":104,"CTE_I":105,"CTE_F":106,"CTE_C":107,"$accept":0,"$end":1},
terminals_: {2:"error",4:"program",5:"id",6:";",10:"EOF",13:"function",15:"(",17:")",19:"void",20:"main",23:"int",24:"float",25:"char",26:"{",29:"}",30:"vars",33:":",35:",",49:"=",56:"return",58:"read",60:"write",64:"CTE_S",70:"if",71:"else",72:"while",76:"for",77:"to",78:"do",82:"<=",84:">=",85:"<",86:">",87:"==",88:"!=",89:"&",90:"|",94:"+",96:"-",100:"*",101:"/",105:"CTE_I",106:"CTE_F",107:"CTE_C"},
productions_: [0,[3,7],[3,8],[8,0],[12,0],[11,8],[11,9],[9,8],[21,0],[14,1],[14,1],[22,1],[22,1],[22,1],[18,4],[7,2],[7,0],[27,2],[27,0],[31,5],[31,4],[32,5],[32,4],[34,3],[34,0],[16,1],[16,0],[36,6],[37,0],[38,0],[39,2],[39,0],[28,2],[28,0],[40,1],[40,2],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[41,4],[41,3],[42,5],[51,0],[52,3],[52,0],[43,6],[57,0],[44,6],[59,0],[45,5],[61,3],[61,2],[62,0],[63,2],[63,0],[46,1],[46,1],[67,0],[68,0],[69,0],[65,7],[66,10],[47,8],[73,0],[74,0],[75,0],[48,8],[50,5],[50,3],[50,4],[50,1],[81,0],[79,2],[79,2],[79,2],[79,2],[79,2],[79,2],[83,0],[80,1],[80,1],[55,4],[55,0],[54,0],[53,4],[53,2],[92,0],[93,2],[93,2],[91,4],[91,2],[98,0],[99,2],[99,2],[95,0],[97,2],[97,1],[97,1],[97,5],[103,0],[104,0],[102,1],[102,1],[102,1],[102,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		funcTable.insertFunc({type: "program", name:$$[$0-5], varTable: globalVarTable})
		// console.log("=============================== ")
		// console.log ("")
		// console.log("CUADRUPLOS ")
		// console.log(codigo.cuadruplos.cuads)
		// console.log ("")
		// console.log("=============================== ")
		// console.log("Funciones ")
		// console.log ("")
		// console.log(funcTable.funcTable)
		// console.log ("")
		// console.log("=============================== ")
		// console.log("Variables ")
		// console.log ("")
		// for(const table in funcTable.funcTable){
		// 	let tableItem = funcTable.getFunc(table);
		// 	console.log(table, tableItem.varTable.varsTable)
		// }
	
break;
case 2:

		funcTable.insertFunc({type: "program", name:$$[$0-6], varTable: globalVarTable})
		console.log("=============================== ")
		console.log ("")
		console.log("CUADRUPLOS ")
		console.log(codigo.cuadruplos.cuads)
		console.log ("")
		console.log("=============================== ")
		console.log("Funciones ")
		console.log ("")
		console.log(funcTable.funcTable)
		console.log ("")
		console.log("=============================== ")
		console.log("Variables ")
		console.log ("")
		for(const table in funcTable.funcTable){
			let tableItem = funcTable.getFunc(table);
			console.log(table, tableItem.varTable.varsTable)
		}
	
break;
case 3:

		codigo.gotoMain();
	
break;
case 4:

		cuadCounter = codigo.cuadruplos.counter;
	
break;
case 5: case 6:

		funcTable.insertFunc({type: $$[$0-6], name:$$[$0-5], varTable: varT, varCounter: funcVarCounter, paramCounter: funcParamCounter, firstCuad: cuadCounter})
		varT = new tablaVariables();
		funcVarCounter = 0;
		funcParamCounter = 0;
	
break;
case 7:

		funcTable.insertFunc({type: $$[$0-6], name:$$[$0-5], varTable: varT, varCounter: funcVarCounter, paramCounter: funcParamCounter, firstCuad: cuadCounter, varUpperLimit: pointerLocal})
		varT = new tablaVariables();
		funcVarCounter = 0;
		funcParamCounter = 0;
	
break;
case 8:

		codigo.fillMain();
	
break;
case 19: case 20:

		pointerGlobal = mm.getCurrentGlobalPointer($$[$0-3]);
		mm.inserGlobal($$[$0-3], $$[$0-1], '');
		globalVarTable.insertVar($$[$0-1], {tipo: $$[$0-3], dir: pointerGlobal})
	
break;
case 21: case 22:

		pointerLocal = mm.getCurrentLocalPointer($$[$0-3]);
		mm.inserLocal($$[$0-3], $$[$0-1], '')
		varT.insertVar($$[$0-1], {tipo: $$[$0-3], dir: pointerLocal})
		funcVarCounter += 1;
	
break;
case 28:

		tipoParam = $$[$0];
		pointerLocal = mm.getCurrentLocalPointer($$[$0]);
		//console.log("got pointer",pointerLocal)
	
break;
case 29:

		// console.log("inser", pointerLocal, $$[$0], '')
		mm.inserLocal(pointerLocal, $$[$0], '')
		varT.insertVar($$[$0], {tipo: tipoParam, dir: pointerLocal})
		funcParamCounter+=1;
	
break;
case 42:

		codigo.addOperando($$[$0-3])
		codigo.addOperador($$[$0-2])
		codigo.asignStmt()
	
break;
case 45:

		codigo.genEra()
	
break;
case 49:

		codigo.returnStmt()
	
break;
case 51:

		let readLocal = varT.getVar($$[$0]);
		let readGlobal = globalVarTable.getVar($$[$0])
		// let readType;
		// let readMemoria;
		if(readLocal != undefined){
			// readMemoria = mm.getMapaLocal(readLocal.tipo)
			// // mm.updateLocal(readLocal.tipo, readLocal.dir,input )
			codigo.addOperando($$[$0], readLocal.tipo)
		}else if(readGlobal != undefined){
			codigo.addOperando($$[$0], readGlobal.tipo)
		}
		codigo.readStmt()
	
break;
case 55:

		codigo.writeStmt()
	
break;
case 60:

		codigo.fill_ifStmt()
	
break;
case 61:

		codigo.ifStmt()
	
break;
case 62:

		codigo.elseStmt()
	
break;
case 66:
codigo.whileStmtMarkStart()
break;
case 67:
codigo.whileStmt()
break;
case 68:
codigo.endWhileStmt()
break;
case 74:

		codigo.validarCond()
	
break;
case 81:

		codigo.addOperador($$[$0])
	
break;
case 86:


	
break;
case 89:

		let res = codigo.validarSumaResta()
	
break;
case 94:

		codigo.validarMultDiv()
	
break;
case 97:

		codigo.addOperador($$[$0]);
	
break;
case 102:
codigo.addOperador($$[$0])
break;
case 103:
codigo.consumeOperador()
break;
case 104:

		let tipoLocal = varT.getVarType($$[$0]);
		let tipoGlobal = globalVarTable.getVarType($$[$0]);
		let temp;
		if(tipoLocal != undefined){
			temp = tipoLocal;
			codigo.addOperando($$[$0], tipoLocal);

		}
		else if(tipoGlobal != undefined){
			temp = tipoGlobal;
			codigo.addOperando($$[$0], tipoGlobal);
		}
		else{
			throw new Error (`var no declarada ${$$[$0]}`)
		}

		
	
break;
case 105:

		codigo.addOperando($$[$0], "int");
	
break;
case 106:

		codigo.addOperando($$[$0], "float");
	
break;
case 107:

		codigo.addOperando($$[$0], "char");
	
break;
}
},
table: [{3:1,4:[1,2]},{1:[3]},{5:[1,3]},{6:[1,4]},{7:5,13:[2,16],30:[1,6]},{8:7,13:[2,3]},{22:9,23:$V0,24:$V1,25:$V2,31:8},{9:13,11:14,13:[1,15]},{13:[2,15],22:16,23:$V0,24:$V1,25:$V2},{33:[1,17]},o($V3,[2,11]),o($V3,[2,12]),o($V3,[2,13]),{10:[1,18]},{9:19,13:[1,20]},{14:22,19:$V4,22:23,23:$V0,24:$V1,25:$V2},{33:[1,24]},{5:[1,25]},{1:[2,1]},{10:[1,26]},{14:27,19:$V4,22:23,23:$V0,24:$V1,25:$V2},{5:[2,9],20:[1,28]},{5:[1,29]},{5:[2,10]},{5:[1,30]},{6:[1,31]},{1:[2,2]},{5:[1,32]},{15:[2,8],21:33},{15:[1,34]},{6:[1,35]},o($V5,[2,20]),{15:[1,36]},{15:[1,37]},{16:38,17:$V6,22:40,23:$V0,24:$V1,25:$V2,36:39},o($V5,[2,19]),{16:41,17:$V6,22:40,23:$V0,24:$V1,25:$V2,36:39},{17:[1,42]},{17:[1,43]},{17:[2,25]},{33:[2,28],37:44},{17:[1,45]},{12:46,26:$V7},{12:47,26:$V7},{33:[1,48]},{12:49,26:$V7},{18:50,26:$V8},{18:52,26:$V8},{5:[1,53]},{18:54,26:$V8},{10:[2,7]},o($V9,[2,18],{27:55,30:[1,56]}),{13:[2,5]},o($Va,[2,29],{38:57}),{13:[2,6]},{5:$Vb,28:58,29:$Vc,40:59,41:60,42:61,43:62,44:63,45:64,46:65,47:66,48:67,56:$Vd,58:$Ve,60:$Vf,65:72,66:73,70:$Vg,72:$Vh,76:$Vi},{22:78,23:$V0,24:$V1,25:$V2,32:77},{17:[2,31],35:[1,80],39:79},{29:[1,81]},{5:$Vb,28:82,29:$Vc,40:59,41:60,42:61,43:62,44:63,45:64,46:65,47:66,48:67,56:$Vd,58:$Ve,60:$Vf,65:72,66:73,70:$Vg,72:$Vh,76:$Vi},o($V9,[2,34]),{6:[1,83]},o($V9,[2,36]),o($V9,[2,37]),o($V9,[2,38]),o($V9,[2,39]),o($V9,[2,40]),o($V9,[2,41]),{15:$Vj,49:[1,84]},{15:[1,86]},{15:[1,87]},{15:[1,88]},o($V9,[2,58]),o($V9,[2,59]),{15:[2,66],73:89},{5:[1,90]},{15:[1,91]},o($V9,[2,17],{22:92,23:$V0,24:$V1,25:$V2}),{33:[1,93]},{17:[2,27]},{22:40,23:$V0,24:$V1,25:$V2,36:94},o([5,10,13,29,56,58,60,70,71,72,76],[2,14]),{29:[2,32]},o($V9,[2,35]),{5:$Vk,15:$Vl,42:96,50:95,53:97,91:99,93:101,94:$Vm,96:$Vn,97:100,102:102,105:$Vo,106:$Vp,107:$Vq},o([5,15,17,94,96,105,106,107],[2,45],{51:109}),{5:$Vk,15:$Vl,42:111,53:110,91:99,93:101,94:$Vm,96:$Vn,97:100,102:102,105:$Vo,106:$Vp,107:$Vq},{5:[1,112]},{5:$Vk,15:$Vl,42:111,50:114,53:97,61:113,64:$Vr,91:99,93:101,94:$Vm,96:$Vn,97:100,102:102,105:$Vo,106:$Vp,107:$Vq},{15:[1,116]},{49:[1,117]},{5:$Vk,15:$Vl,42:111,50:118,53:97,91:99,93:101,94:$Vm,96:$Vn,97:100,102:102,105:$Vo,106:$Vp,107:$Vq},{33:[1,119]},{5:[1,120]},{17:[2,30]},{6:[1,121]},o([6,82,84,85,86,87,88,89,90,94,96,100,101],$Vs,{5:$Vt,29:$Vt,56:$Vt,58:$Vt,60:$Vt,70:$Vt,72:$Vt,76:$Vt}),o($Vu,[2,73],{79:122,80:123,82:[1,124],84:[1,125],85:[1,126],86:[1,127],87:[1,128],88:[1,129],89:$Vv,90:$Vw}),o($Vx,$Vy,{15:$Vj}),o($Vz,[2,89],{92:132}),o($Vx,[2,94],{98:133}),{5:[1,135],102:134,105:$Vo,106:$Vp,107:$Vq},o($Vx,[2,99]),o($VA,[2,102],{103:136}),o($VA,$VB,{95:137}),o($VA,$VB,{95:138}),o($Vx,[2,105]),o($Vx,[2,106]),o($Vx,[2,107]),{5:$Vk,15:$Vl,17:[2,47],42:111,52:139,53:140,91:99,93:101,94:$Vm,96:$Vn,97:100,102:102,105:$Vo,106:$Vp,107:$Vq},{17:[1,141]},o($Vx,$Vs),{17:[2,51],59:142},{17:[1,143]},o($Va,[2,55],{62:144}),{17:$VC,35:$VD,63:145},{5:$Vk,15:$Vl,42:111,50:147,53:97,91:99,93:101,94:$Vm,96:$Vn,97:100,102:102,105:$Vo,106:$Vp,107:$Vq},{5:$Vk,15:$Vl,42:111,53:148,91:99,93:101,94:$Vm,96:$Vn,97:100,102:102,105:$Vo,106:$Vp,107:$Vq},{17:[1,149]},{5:[1,150]},{6:[1,151]},o($V9,[2,42]),{5:$Vk,15:$Vl,42:111,53:152,91:99,93:101,94:$Vm,96:$Vn,97:100,102:102,105:$Vo,106:$Vp,107:$Vq},{5:$Vk,15:$Vl,42:111,50:153,53:97,91:99,93:101,94:$Vm,96:$Vn,97:100,102:102,105:$Vo,106:$Vp,107:$Vq},o($VA,$VE,{83:154}),o($VA,$VE,{83:155}),o($VA,$VE,{83:156}),o($VA,$VE,{83:157}),o($VA,$VE,{83:158}),o($VA,$VE,{83:159}),o($VA,[2,82]),o($VA,[2,83]),o($VF,[2,88],{93:160,94:$Vm,96:$Vn}),o($Vz,[2,93],{99:161,100:[1,162],101:[1,163]}),o($Vx,[2,98]),o($Vx,$Vy),{5:$Vk,15:$Vl,42:111,53:164,91:99,93:101,94:$Vm,96:$Vn,97:100,102:102,105:$Vo,106:$Vp,107:$Vq},o($VA,[2,90]),o($VA,[2,91]),{17:[1,165]},o($Va,$VG,{54:166}),{6:[1,167]},{17:[1,168]},{6:[1,169]},{17:$VC,35:$VD,63:170},{17:[2,54]},{5:$Vk,15:$Vl,42:111,50:114,53:97,61:171,64:$Vr,91:99,93:101,94:$Vm,96:$Vn,97:100,102:102,105:$Vo,106:$Vp,107:$Vq},{17:[1,172]},{77:[1,173]},{26:[2,61],68:174},{6:[1,175]},o($VH,[2,22]),o($Vu,[2,74],{80:176,81:177,89:$Vv,90:$Vw}),o($Vu,[2,71]),o($VA,[2,75]),o($VA,[2,76]),o($VA,[2,77]),o($VA,[2,78]),o($VA,[2,79]),o($VA,[2,80]),{5:$Vk,15:$Vl,42:111,53:178,91:99,93:101,94:$Vm,96:$Vn,97:100,102:102,105:$Vo,106:$Vp,107:$Vq},{5:$Vk,15:$Vl,42:111,91:179,93:101,94:$Vm,96:$Vn,97:100,102:102,105:$Vo,106:$Vp,107:$Vq},o($VA,$VB,{95:180}),o($VA,$VB,{95:181}),{17:[2,103],104:182},o([5,6,17,29,35,56,58,60,70,72,76,77,78,82,84,85,86,87,88,89,90,94,96,100,101],[2,44]),{17:$VI,35:$VJ,55:183},o($V9,[2,49],{57:185}),{6:[1,186]},o($V9,[2,52]),{17:[2,53]},{17:[2,56]},{26:[2,67],74:187},{5:$Vk,15:$Vl,42:111,53:188,91:99,93:101,94:$Vm,96:$Vn,97:100,102:102,105:$Vo,106:$Vp,107:$Vq},{18:189,26:$V8},o($VH,[2,21]),{5:$Vk,15:$Vl,42:111,50:190,53:97,91:99,93:101,94:$Vm,96:$Vn,97:100,102:102,105:$Vo,106:$Vp,107:$Vq},o($Vu,[2,72]),o($VF,[2,87]),o($Vz,[2,92]),o($VA,[2,95]),o($VA,[2,96]),{17:[1,191]},{17:[2,46]},{5:$Vk,15:$Vl,42:111,53:192,91:99,93:101,94:$Vm,96:$Vn,97:100,102:102,105:$Vo,106:$Vp,107:$Vq},o($V9,[2,48]),o($V9,[2,50]),{18:193,26:$V8},{78:[1,194]},o($V9,$VK,{67:195,71:[1,196]}),o($Vu,[2,70]),o($Vx,[2,101]),o($Va,$VG,{54:197}),o($V9,[2,68],{75:198}),{18:199,26:$V8},o($V9,[2,63]),{26:[2,62],69:200},{17:$VI,35:$VJ,55:201},o($V9,[2,65]),o($V9,[2,69]),{18:202,26:$V8},{17:[2,84]},o($V9,$VK,{67:203}),o($V9,[2,64])],
defaultActions: {18:[2,1],23:[2,10],26:[2,2],39:[2,25],50:[2,7],52:[2,5],54:[2,6],79:[2,27],82:[2,32],94:[2,30],145:[2,54],170:[2,53],171:[2,56],183:[2,46],201:[2,84]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


const codigoInt = require('./codigoInt')
const cuboSemantico = require('./cuboSemantico')
const cuadruplos = require("./cuadruplos");
const mapaMemoria = require('./mapaMemoria');
const manejadorMemoria = require('./manejadorMemoria');
const directorioProcedimientos = require('./directorioProcedimientos'); 
const tablaVariables = require('./tablaVariables'); 

	
//variables usadas en jison lexer
let codigo = new codigoInt();
let cuadruplo = new cuadruplos();
let mm = new manejadorMemoria();
let funcTable = new directorioProcedimientos();
let funcVarTable = new tablaVariables();
let varT = new tablaVariables();
let globalVarTable = new tablaVariables();





let pointerGlobal;
let pointerLocal;

let tipoParam;

let funcVarCounter = 0;
let funcParamCounter = 0;
let cuadCounter = 0;


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 6;
break;
case 1:return 33;
break;
case 2:return 35;
break;
case 3:return 15;
break;
case 4:return 17;
break;
case 5:return 26;
break;
case 6:return 29;
break;
case 7:return 94;
break;
case 8:return 96;
break;
case 9:return 100;
break;
case 10:return 101;
break;
case 11:return 84;
break;
case 12:return 82;
break;
case 13:return 86;
break;
case 14:return 85;
break;
case 15:return 88;
break;
case 16:return 87;
break;
case 17:return 49;
break;
case 18:return 89;
break;
case 19:return 90;
break;
case 20:
break;
case 21:
break;
case 22:return "vars"
break;
case 23:return "program"
break;
case 24:return "read"
break;
case 25:return "write"
break;
case 26:return "function"
break;
case 27:return "return"
break;
case 28:return "int"
break;
case 29:return "float"
break;
case 30:return "char"
break;
case 31:return "void"
break;
case 32:return "print"
break;
case 33:return "if"
break;
case 34:return "else"
break;
case 35:return "for"
break;
case 36:return "to"
break;
case 37:return "do"
break;
case 38:return "while"
break;
case 39:return "main"
break;
case 40:return 5 
break;
case 41:return 106;
break;
case 42:return 105;
break;
case 43:return 107;
break;
case 44:return 64;
break;
case 45:return 10;
break;
case 46: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:!=)/,/^(?:==)/,/^(?:=)/,/^(?:&)/,/^(?:\|)/,/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:vars\b)/,/^(?:program\b)/,/^(?:read\b)/,/^(?:write\b)/,/^(?:function\b)/,/^(?:return\b)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:char\b)/,/^(?:void\b)/,/^(?:print\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:to\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:main\b)/,/^(?:[a-zA-Z][a-zA-Z_0-9]*\b)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:'[a-zA-Z]')/,/^(?:"(\\.|[^\"])*")/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = lexer;
exports.Parser = lexer.Parser;
exports.parse = function () { return lexer.parse.apply(lexer, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}