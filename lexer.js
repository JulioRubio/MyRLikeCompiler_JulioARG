/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var lexer = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,11],$V2=[1,12],$V3=[5,32],$V4=[1,21],$V5=[12,23,24,25],$V6=[2,25],$V7=[2,17],$V8=[1,47],$V9=[1,52],$Va=[1,69],$Vb=[2,30],$Vc=[1,70],$Vd=[1,71],$Ve=[1,72],$Vf=[1,77],$Vg=[1,75],$Vh=[1,76],$Vi=[5,28,49,51,53,62,64,68],$Vj=[1,84],$Vk=[1,99],$Vl=[1,102],$Vm=[1,103],$Vn=[1,104],$Vo=[1,105],$Vp=[1,106],$Vq=[1,108],$Vr=[1,113],$Vs=[6,16,34],$Vt=[1,128],$Vu=[1,129],$Vv=[2,92],$Vw=[6,16,34,69,70,74,76,77,78,79,80,81,82,86,88],$Vx=[6,16,34,69,70,74,76,77,78,79,80,81,82,86,88,92,93],$Vy=[5,14,86,88,95,96,97],$Vz=[2,88],$VA=[2,77],$VB=[1,137],$VC=[2,49],$VD=[1,142],$VE=[23,24,25,26],$VF=[2,73],$VG=[6,16,34,69,70,74,76,77,78,79,80,81,82],$VH=[2,52];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"PROGRAMA":3,"program":4,"id":5,";":6,"PROG_OPT_VARS":7,"gotoMain":8,"MAIN":9,"EOF":10,"FUNCTION":11,"function":12,"FUNC_TYPE":13,"(":14,"OPT_PARAMS":15,")":16,"FUNC_OPT_VARS":17,"BLOQUE":18,"void":19,"main":20,"fillMain":21,"TYPE":22,"int":23,"float":24,"char":25,"{":26,"ESTATUTOS":27,"}":28,"vars":29,"PROG_VARS":30,"FUNC_VARS":31,":":32,"LISTAS_IDS":33,",":34,"PARAMS":35,"MULT_PARAMS":36,"ESTATUTO":37,"ASIGNACION":38,"LLAMADA_VOID":39,"RETURN":40,"READ":41,"WRITE":42,"CONDITION":43,"WHILE":44,"FOR":45,"=":46,"EXPRESSION":47,"MULT_EXPRESSION":48,"return":49,"EXP":50,"read":51,"assignReadVal":52,"write":53,"WRITE_TYPE":54,"MULT_WRITE":55,"CTE_S":56,"CONDITION_IF":57,"CONDITION_IF_ELSE":58,"fill":59,"addIf":60,"addElse":61,"if":62,"else":63,"while":64,"whileStmtMarkStart":65,"whileStmt":66,"endWhileStmt":67,"for":68,"to":69,"do":70,"EXPRESSION_TYPE":71,"EXPRESSION_CONJ":72,"validarCond":73,"<":74,"addCondOper":75,">":76,"<=":77,">=":78,"==":79,"!=":80,"&":81,"|":82,"TERM":83,"semanticCreateCuadSumRes":84,"EXP_TYPE":85,"+":86,"addOper":87,"-":88,"FACTOR":89,"semanticCreateCuadMultDiv":90,"TERM_TYPE":91,"*":92,"/":93,"VAR_CTE":94,"CTE_I":95,"CTE_F":96,"CTE_C":97,"$accept":0,"$end":1},
terminals_: {2:"error",4:"program",5:"id",6:";",10:"EOF",12:"function",14:"(",16:")",19:"void",20:"main",23:"int",24:"float",25:"char",26:"{",28:"}",29:"vars",32:":",34:",",46:"=",49:"return",51:"read",53:"write",56:"CTE_S",62:"if",63:"else",64:"while",68:"for",69:"to",70:"do",74:"<",76:">",77:"<=",78:">=",79:"==",80:"!=",81:"&",82:"|",86:"+",88:"-",92:"*",93:"/",95:"CTE_I",96:"CTE_F",97:"CTE_C"},
productions_: [0,[3,7],[3,8],[8,0],[11,8],[11,9],[9,8],[21,0],[13,1],[13,1],[22,1],[22,1],[22,1],[18,3],[7,2],[7,0],[17,2],[17,0],[30,5],[30,4],[31,5],[31,4],[33,3],[33,0],[15,1],[15,0],[35,4],[36,2],[36,0],[27,2],[27,0],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[38,4],[38,3],[39,6],[40,5],[41,6],[52,0],[42,5],[54,2],[54,2],[55,2],[55,0],[43,1],[43,1],[59,0],[60,0],[61,0],[57,7],[58,10],[44,8],[65,0],[66,0],[67,0],[45,8],[47,5],[47,3],[47,4],[47,1],[73,0],[71,2],[71,2],[71,2],[71,2],[71,2],[71,2],[75,0],[72,1],[72,1],[48,3],[48,0],[50,4],[50,2],[84,0],[85,2],[85,2],[83,4],[83,2],[90,0],[91,2],[91,2],[87,0],[89,3],[89,2],[89,1],[94,1],[94,1],[94,1],[94,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		funcTable.insertFunc({type: "program", name:$$[$0-5], varTable: globalVarTable})
		// console.log("=============================== ")
		// console.log ("")
		console.log("CUADRUPLOS ")
		console.log(codigo.cuadruplos.cuads)
		// console.log ("")
		// console.log("=============================== ")
		// console.log("Funciones ")
		// console.log ("")
		// console.log(funcTable.funcTable)
		// console.log ("")
		// console.log("=============================== ")
		// console.log("Variables ")
		// console.log ("")
		// for(const table in funcTable.funcTable){
		// 	let tableItem = funcTable.getFunc(table);
		// 	console.log(table, tableItem.varTable.varsTable)
		// }
	
break;
case 2:

		funcTable.insertFunc({type: "program", name:$$[$0-6], varTable: globalVarTable})
		// console.log("=============================== ")
		// console.log ("")
		console.log("CUADRUPLOS ")
		console.log(codigo.cuadruplos.cuads)
		// console.log ("")
		// console.log("=============================== ")
		// console.log("Funciones ")
		// console.log ("")
		// console.log(funcTable.funcTable)
		// console.log ("")
		// console.log("=============================== ")
		// console.log("Variables ")
		// console.log ("")
		// for(const table in funcTable.funcTable){
		// 	let tableItem = funcTable.getFunc(table);
		// 	console.log(table, tableItem.varTable.varsTable)
		// }
	
break;
case 3:

		codigo.gotoMain();
	
break;
case 4: case 5: case 6:

		funcTable.insertFunc({type: $$[$0-6], name:$$[$0-5], varTable: varT})
		varT = new tablaVariables();
	
break;
case 7:

		codigo.fillMain();
	
break;
case 18: case 19:

		pointerGlobal = mm.getCurrentGlobalPointer($$[$0-3]);
		mm.inserGlobal($$[$0-3], $$[$0-1], '');
		globalVarTable.insertVar($$[$0-1], {tipo: $$[$0-3], dir: pointerGlobal})
	
break;
case 20: case 21:

		pointerLocal = mm.getCurrentLocalPointer($$[$0-3]);
		mm.inserLocal($$[$0-3], $$[$0-1], '')
		varT.insertVar($$[$0-1], {tipo: $$[$0-3], dir: pointerLocal})
	
break;
case 39:

		codigo.addOperando($$[$0-3])
		codigo.addOperador($$[$0-2])
		codigo.asignStmt()
	
break;
case 44:

		let readLocal = varT.getVar($$[$0]);
		let readGlobal = globalVarTable.getVar($$[$0])
		// let readType;
		// let readMemoria;
		if(readLocal != undefined){
			// readMemoria = mm.getMapaLocal(readLocal.tipo)
			// // mm.updateLocal(readLocal.tipo, readLocal.dir,input )
			codigo.addOperando($$[$0], readLocal.tipo)
		}else if(readGlobal != undefined){
			codigo.addOperando($$[$0], readGlobal.tipo)
		}
		codigo.readStmt()
	
break;
case 52:

		codigo.fill_ifStmt()
	
break;
case 53:

		codigo.ifStmt()
	
break;
case 54:

		codigo.elseStmt()
	
break;
case 58:
codigo.whileStmtMarkStart()
break;
case 59:
codigo.whileStmt()
break;
case 60:
codigo.endWhileStmt()
break;
case 66:

		codigo.validarCond()
	
break;
case 73:

		codigo.addOperador($$[$0])
	
break;
case 80:

		let res = codigo.validarSumaResta()
	
break;
case 85:

		codigo.validarMultDiv()
	
break;
case 88:

		codigo.addOperador($$[$0]);
	
break;
case 92:

		let tipoLocal = varT.getVarType($$[$0]);
		let tipoGlobal = globalVarTable.getVarType($$[$0]);
		let temp;
		if(tipoLocal != undefined){
			temp = tipoLocal;
			codigo.addOperando($$[$0], tipoLocal);

		}
		else if(tipoGlobal != undefined){
			temp = tipoGlobal;
			codigo.addOperando($$[$0], tipoGlobal);
		}
		else{
			throw new Error (`var no declarada ${$$[$0]}`)
		}

		
	
break;
case 93:

		codigo.addOperando($$[$0], "int");
	
break;
case 94:

		codigo.addOperando($$[$0], "float");
	
break;
case 95:

		codigo.addOperando($$[$0], "char");
	
break;
}
},
table: [{3:1,4:[1,2]},{1:[3]},{5:[1,3]},{6:[1,4]},{7:5,12:[2,15],29:[1,6]},{8:7,12:[2,3]},{22:9,23:$V0,24:$V1,25:$V2,30:8},{9:13,11:14,12:[1,15]},{12:[2,14],22:16,23:$V0,24:$V1,25:$V2},{32:[1,17]},o($V3,[2,10]),o($V3,[2,11]),o($V3,[2,12]),{10:[1,18]},{9:19,12:[1,20]},{13:22,19:$V4,22:23,23:$V0,24:$V1,25:$V2},{32:[1,24]},{5:[1,25]},{1:[2,1]},{10:[1,26]},{13:27,19:$V4,22:23,23:$V0,24:$V1,25:$V2},{5:[2,8],20:[1,28]},{5:[1,29]},{5:[2,9]},{5:[1,30]},{6:[1,31]},{1:[2,2]},{5:[1,32]},{14:[2,7],21:33},{14:[1,34]},{6:[1,35]},o($V5,[2,19]),{14:[1,36]},{14:[1,37]},{15:38,16:$V6,22:40,23:$V0,24:$V1,25:$V2,35:39},o($V5,[2,18]),{15:41,16:$V6,22:40,23:$V0,24:$V1,25:$V2,35:39},{16:[1,42]},{16:[1,43]},{16:[2,24]},{32:[1,44]},{16:[1,45]},{17:46,26:$V7,29:$V8},{17:48,26:$V7,29:$V8},{5:[1,49]},{17:50,26:$V7,29:$V8},{18:51,26:$V9},{22:54,23:$V0,24:$V1,25:$V2,31:53},{18:55,26:$V9},{16:[2,28],34:[1,57],36:56},{18:58,26:$V9},{10:[2,6]},{5:$Va,27:59,28:$Vb,37:60,38:61,39:62,40:63,41:64,42:65,43:66,44:67,45:68,49:$Vc,51:$Vd,53:$Ve,57:73,58:74,62:$Vf,64:$Vg,68:$Vh},{22:78,23:$V0,24:$V1,25:$V2,26:[2,16]},{32:[1,79]},{12:[2,4]},{16:[2,26]},{22:40,23:$V0,24:$V1,25:$V2,35:80},{12:[2,5]},{28:[1,81]},{5:$Va,27:82,28:$Vb,37:60,38:61,39:62,40:63,41:64,42:65,43:66,44:67,45:68,49:$Vc,51:$Vd,53:$Ve,57:73,58:74,62:$Vf,64:$Vg,68:$Vh},o($Vi,[2,31]),o($Vi,[2,32]),o($Vi,[2,33]),o($Vi,[2,34]),o($Vi,[2,35]),o($Vi,[2,36]),o($Vi,[2,37]),o($Vi,[2,38]),{14:$Vj,46:[1,83]},{14:[1,85]},{14:[1,86]},{14:[1,87]},o($Vi,[2,50]),o($Vi,[2,51]),{14:[2,58],65:88},{5:[1,89]},{14:[1,90]},{32:[1,91]},{5:[1,92]},{16:[2,27]},o([5,10,12,28,49,51,53,62,63,64,68],[2,13]),{28:[2,29]},{5:[1,96],14:$Vk,39:94,47:93,50:95,83:97,85:100,86:$Vl,88:$Vm,89:98,94:101,95:$Vn,96:$Vo,97:$Vp},{5:$Vq,14:$Vk,47:107,50:95,83:97,85:100,86:$Vl,88:$Vm,89:98,94:101,95:$Vn,96:$Vo,97:$Vp},{5:$Vq,14:$Vk,50:109,83:97,85:100,86:$Vl,88:$Vm,89:98,94:101,95:$Vn,96:$Vo,97:$Vp},{5:[1,110]},{5:$Vq,14:$Vk,47:112,50:95,54:111,56:$Vr,83:97,85:100,86:$Vl,88:$Vm,89:98,94:101,95:$Vn,96:$Vo,97:$Vp},{14:[1,114]},{46:[1,115]},{5:$Vq,14:$Vk,47:116,50:95,83:97,85:100,86:$Vl,88:$Vm,89:98,94:101,95:$Vn,96:$Vo,97:$Vp},{5:[1,117]},{6:[1,118]},{6:[1,119]},o($Vi,[2,40]),o($Vs,[2,65],{71:120,72:121,74:[1,122],76:[1,123],77:[1,124],78:[1,125],79:[1,126],80:[1,127],81:$Vt,82:$Vu}),o([6,74,76,77,78,79,80,81,82,86,88,92,93],$Vv,{14:$Vj}),o($Vw,[2,80],{84:130}),o($Vx,[2,85],{90:131}),{5:$Vq,14:$Vk,47:132,50:95,83:97,85:100,86:$Vl,88:$Vm,89:98,94:101,95:$Vn,96:$Vo,97:$Vp},{5:$Vq,94:133,95:$Vn,96:$Vo,97:$Vp},o($Vx,[2,91]),o($Vy,$Vz,{87:134}),o($Vy,$Vz,{87:135}),o($Vx,[2,93]),o($Vx,[2,94]),o($Vx,[2,95]),{16:$VA,34:$VB,48:136},o($Vx,$Vv),{16:[1,138]},{16:[2,44],52:139},{16:[1,140]},{16:$VC,34:$VD,55:141},{16:$VC,34:$VD,55:143},{5:$Vq,14:$Vk,47:144,50:95,83:97,85:100,86:$Vl,88:$Vm,89:98,94:101,95:$Vn,96:$Vo,97:$Vp},{5:$Vq,14:$Vk,50:145,83:97,85:100,86:$Vl,88:$Vm,89:98,94:101,95:$Vn,96:$Vo,97:$Vp},{16:[1,146]},{6:[1,147]},o($VE,[2,21]),o($Vi,[2,39]),{5:$Vq,14:$Vk,50:148,83:97,85:100,86:$Vl,88:$Vm,89:98,94:101,95:$Vn,96:$Vo,97:$Vp},{5:$Vq,14:$Vk,47:149,50:95,83:97,85:100,86:$Vl,88:$Vm,89:98,94:101,95:$Vn,96:$Vo,97:$Vp},o($Vy,$VF,{75:150}),o($Vy,$VF,{75:151}),o($Vy,$VF,{75:152}),o($Vy,$VF,{75:153}),o($Vy,$VF,{75:154}),o($Vy,$VF,{75:155}),o($Vy,[2,74]),o($Vy,[2,75]),o($VG,[2,79],{85:156,86:$Vl,88:$Vm}),o($Vw,[2,84],{91:157,92:[1,158],93:[1,159]}),{16:[1,160]},o($Vx,[2,90]),o($Vy,[2,81]),o($Vy,[2,82]),{16:[1,161]},{5:$Vq,14:$Vk,47:162,50:95,83:97,85:100,86:$Vl,88:$Vm,89:98,94:101,95:$Vn,96:$Vo,97:$Vp},{6:[1,163]},{16:[1,164]},{6:[1,165]},{16:[2,46]},{5:$Vq,14:$Vk,47:112,50:95,54:166,56:$Vr,83:97,85:100,86:$Vl,88:$Vm,89:98,94:101,95:$Vn,96:$Vo,97:$Vp},{16:[2,47]},{16:[1,167]},{69:[1,168]},{26:[2,53],60:169},o($VE,[2,20]),o($Vs,[2,66],{72:170,73:171,81:$Vt,82:$Vu}),o($Vs,[2,63]),o($Vy,[2,67]),o($Vy,[2,68]),o($Vy,[2,69]),o($Vy,[2,70]),o($Vy,[2,71]),o($Vy,[2,72]),{5:$Vq,14:$Vk,50:172,83:97,85:100,86:$Vl,88:$Vm,89:98,94:101,95:$Vn,96:$Vo,97:$Vp},{5:$Vq,14:$Vk,83:173,85:100,86:$Vl,88:$Vm,89:98,94:101,95:$Vn,96:$Vo,97:$Vp},o($Vy,$Vz,{87:174}),o($Vy,$Vz,{87:175}),o($Vx,[2,89]),{6:[1,176]},{16:$VA,34:$VB,48:177},o($Vi,[2,42]),{6:[1,178]},o($Vi,[2,45]),{16:[2,48]},{26:[2,59],66:179},{5:$Vq,14:$Vk,50:180,83:97,85:100,86:$Vl,88:$Vm,89:98,94:101,95:$Vn,96:$Vo,97:$Vp},{18:181,26:$V9},{5:$Vq,14:$Vk,47:182,50:95,83:97,85:100,86:$Vl,88:$Vm,89:98,94:101,95:$Vn,96:$Vo,97:$Vp},o($Vs,[2,64]),o($VG,[2,78]),o($Vw,[2,83]),o($Vy,[2,86]),o($Vy,[2,87]),o($Vi,[2,41]),{16:[2,76]},o($Vi,[2,43]),{18:183,26:$V9},{70:[1,184]},o($Vi,$VH,{59:185,63:[1,186]}),o($Vs,[2,62]),o($Vi,[2,60],{67:187}),{18:188,26:$V9},o($Vi,[2,55]),{26:[2,54],61:189},o($Vi,[2,57]),o($Vi,[2,61]),{18:190,26:$V9},o($Vi,$VH,{59:191}),o($Vi,[2,56])],
defaultActions: {18:[2,1],23:[2,9],26:[2,2],39:[2,24],51:[2,6],55:[2,4],56:[2,26],58:[2,5],80:[2,27],82:[2,29],141:[2,46],143:[2,47],166:[2,48],177:[2,76]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


const codigoInt = require('./codigoInt')
const cuboSemantico = require('./cuboSemantico')
const cuadruplos = require("./cuadruplos");
const mapaMemoria = require('./mapaMemoria');
const manejadorMemoria = require('./manejadorMemoria');
const directorioProcedimientos = require('./directorioProcedimientos'); 
const tablaVariables = require('./tablaVariables'); 

	
//variables usadas en jison lexer
let codigo = new codigoInt();
let cuadruplo = new cuadruplos();
let mm = new manejadorMemoria();
let funcTable = new directorioProcedimientos();
let funcVarTable = new tablaVariables();
let varT = new tablaVariables();
let globalVarTable = new tablaVariables();





let pointerGlobal;
let pointerLocal;



/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 6;
break;
case 1:return 32;
break;
case 2:return 34;
break;
case 3:return 14;
break;
case 4:return 16;
break;
case 5:return 26;
break;
case 6:return 28;
break;
case 7:return 86;
break;
case 8:return 88;
break;
case 9:return 92;
break;
case 10:return 93;
break;
case 11:return 76;
break;
case 12:return 74;
break;
case 13:return 78;
break;
case 14:return 77;
break;
case 15:return 80;
break;
case 16:return 79;
break;
case 17:return 46;
break;
case 18:return 81;
break;
case 19:return 82;
break;
case 20:
break;
case 21:
break;
case 22:return "vars"
break;
case 23:return "program"
break;
case 24:return "read"
break;
case 25:return "write"
break;
case 26:return "function"
break;
case 27:return "return"
break;
case 28:return "int"
break;
case 29:return "float"
break;
case 30:return "char"
break;
case 31:return "void"
break;
case 32:return "print"
break;
case 33:return "if"
break;
case 34:return "else"
break;
case 35:return "for"
break;
case 36:return "to"
break;
case 37:return "do"
break;
case 38:return "while"
break;
case 39:return "main"
break;
case 40:return 5 
break;
case 41:return 96;
break;
case 42:return 95;
break;
case 43:return 97;
break;
case 44:return 56;
break;
case 45:return 10;
break;
case 46: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:!=)/,/^(?:==)/,/^(?:=)/,/^(?:&)/,/^(?:\|)/,/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:vars\b)/,/^(?:program\b)/,/^(?:read\b)/,/^(?:write\b)/,/^(?:function\b)/,/^(?:return\b)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:char\b)/,/^(?:void\b)/,/^(?:print\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:to\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:main\b)/,/^(?:[a-zA-Z][a-zA-Z_0-9]*\b)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:'[a-zA-Z]')/,/^(?:"(\\.|[^\"])*")/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = lexer;
exports.Parser = lexer.Parser;
exports.parse = function () { return lexer.parse.apply(lexer, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}