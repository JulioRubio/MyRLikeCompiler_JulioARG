

PROGRAM => program id ; VARS FUNCTION
PROGRAM => program id ; FUNCTION 
PROGRAM => program id ; VARS  

VARS => var id LISTA_IDS : TIPO ;
LISTA_IDS => , id LISTA_IDS | eps

TYPE => int | float | char

FUNCTION => function FUNC_TYPE id (FUNC_PARAMS) ; FUNC_VARS BLOQUE
FUNC_TYPE => TYPE | void
FUNC_VARS => VARS | eps
FUNC_PARAMS => PARAMS | eps

PARAMS => TYPE : id LISTA_PARAMS
LISTA_PARAMS => , PARAMS | eps

BLOQUE => { BLOQUE_EST EST}
BLOQUE_EST => BLOQUE_EST EST | eps

ESTATUTOS =>  ESTATUTOS_OPT ;
ESTATUTOS_OPT => ASIGNACION | LLAMADA_VOID | RETURN | READ | WRITE | CONDITION | WHILE | FOR

ASIGNACION => id = EXPRESSION ; | id [ EXP ] ;

LLAMADA_VOID => id (EXPRESSION LISTA_EXPRESSION) ;
LISTA_EXPRESSION => , EXPRESSION LISTA_EXPRESSION | eps

RETURN => return ( EXP ) ;

READ => read (id LISTA_IDS) ;

WRITE => write ( EXPRESION_STRING LISTA_EXPRESSION_STRING ) ;
EXPRESION_STRING => EXPRESSION | cte_string
LISTA_EXPRESSION_STRING => , EXPRESION_STRING LISTA_EXPRESSION_STRING | eps

CONDITION => if ( EXPRESSION ) BLOQUE ; | if ( EXPRESSION ) BLOQUE else BLOQUE ;

WHILE => while ( EXPRESSION ) do BLOQUE

FOR => for id = EXP to EXP do BLOQUE

EXPRESSION => EXP COMP EXP AND_OR
COMP => < | > | ==
AND_OR => & | "|" | eps

EXP => TERM EXP_OP
EXP_OP => + | - | eps

TERM => FACTOR TERM_OP
TERM_OP => * | / | eps

FACTOR => ( EXPRESSION ) | FACTOR_OP VAR_CTE
FACTOR_OP => + | - | eps

VAR_CTE => id | cte_I | cte_F | cte_C