/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var mrLike = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,13],$V1=[1,7],$V2=[12,24],$V3=[1,10],$V4=[1,11],$V5=[1,12],$V6=[5,30],$V7=[2,18],$V8=[1,25],$V9=[2,16],$Va=[6,16],$Vb=[1,42],$Vc=[1,55],$Vd=[1,56],$Ve=[1,57],$Vf=[1,58],$Vg=[1,59],$Vh=[1,60],$Vi=[1,61],$Vj=[2,25],$Vk=[5,27,47,49,50,54,57,59],$Vl=[1,69],$Vm=[1,86],$Vn=[1,89],$Vo=[1,90],$Vp=[1,91],$Vq=[1,92],$Vr=[1,93],$Vs=[1,95],$Vt=[1,100],$Vu=[6,16,33],$Vv=[1,114],$Vw=[1,115],$Vx=[2,74],$Vy=[6,16,33,58,60,63,64,65,66,67,68,69,70],$Vz=[6,16,33,58,60,63,64,65,66,67,68,69,70,73,74],$VA=[6,16,33,58,60,63,64,65,66,67,68,69,70,73,74,77,78],$VB=[5,14,73,74,80,81,82],$VC=[2,62],$VD=[1,123],$VE=[2,43],$VF=[1,128];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"PROGRAMA":3,"program":4,"id":5,";":6,"OPT_VARS":7,"FUNCTIONS":8,"MAIN":9,"EOF":10,"FUNCTION":11,"function":12,"FUNC_TYPE":13,"(":14,"OPT_PARAMS":15,")":16,"BLOQUE":17,"void":18,"main":19,"TYPE":20,"int":21,"float":22,"char":23,"{":24,"ESTATUTO":25,"ESTATUTOS":26,"}":27,"VARS":28,"vars":29,":":30,"LISTAS_IDS":31,"MULT_VARS":32,",":33,"PARAMS":34,"MULT_PARAMS":35,"ASIGNACION":36,"LLAMADA_VOID":37,"RETURN":38,"READ":39,"WRITE":40,"CONDITION":41,"WHILE":42,"FOR":43,"=":44,"EXPRESSION":45,"MULT_EXPRESSION":46,"return":47,"EXP":48,"read":49,"write":50,"WRITE_TYPE":51,"MULT_WRITE":52,"CTE_S":53,"if":54,"CONDITION_ELSE":55,"else":56,"while":57,"do":58,"for":59,"to":60,"EXPRESSION_TYPE":61,"EXPRESSION_CONJ":62,"<":63,">":64,"<=":65,">=":66,"==":67,"!=":68,"&":69,"|":70,"TERM":71,"EXP_TYPE":72,"+":73,"-":74,"FACTOR":75,"TERM_TYPE":76,"*":77,"/":78,"VAR_CTE":79,"CTE_I":80,"CTE_F":81,"CTE_C":82,"$accept":0,"$end":1},
terminals_: {2:"error",4:"program",5:"id",6:";",10:"EOF",12:"function",14:"(",16:")",18:"void",19:"main",21:"int",22:"float",23:"char",24:"{",27:"}",29:"vars",30:":",33:",",44:"=",47:"return",49:"read",50:"write",53:"CTE_S",54:"if",56:"else",57:"while",58:"do",59:"for",60:"to",63:"<",64:">",65:"<=",66:">=",67:"==",68:"!=",69:"&",70:"|",73:"+",74:"-",77:"*",78:"/",80:"CTE_I",81:"CTE_F",82:"CTE_C"},
productions_: [0,[3,7],[8,2],[8,0],[11,8],[9,7],[13,1],[13,1],[20,1],[20,1],[20,1],[17,4],[7,1],[7,0],[28,7],[32,6],[32,0],[31,3],[31,0],[15,1],[15,0],[34,4],[35,2],[35,0],[26,2],[26,0],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[36,4],[36,3],[37,6],[38,5],[39,6],[40,5],[51,2],[51,2],[52,2],[52,0],[41,6],[55,2],[55,0],[42,6],[43,8],[45,5],[45,3],[45,3],[45,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[62,1],[62,1],[46,3],[46,0],[48,3],[48,1],[72,1],[72,1],[71,3],[71,1],[76,1],[76,1],[75,3],[75,2],[75,1],[79,1],[79,1],[79,1],[79,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:[1,2]},{1:[3]},{5:[1,3]},{6:[1,4]},{7:5,12:$V0,28:6,29:$V1},{8:8,12:[2,3]},o($V2,[2,12]),{20:9,21:$V3,22:$V4,23:$V5},{9:13,11:14,12:[1,15]},{30:[1,16]},o($V6,[2,8]),o($V6,[2,9]),o($V6,[2,10]),{10:[1,17]},{12:[2,2]},{13:19,18:[1,18],20:20,21:$V3,22:$V4,23:$V5},{5:[1,21]},{1:[2,1]},{5:[2,6],19:[1,22]},{5:[1,23]},{5:[2,7]},{6:$V7,31:24,33:$V8},{14:[1,26]},{14:[1,27]},{6:[1,28]},{5:[1,29]},{16:[1,30]},{15:31,16:[2,20],20:33,21:$V3,22:$V4,23:$V5,34:32},o($V2,$V9,{32:34,20:35,21:$V3,22:$V4,23:$V5}),o($Va,$V7,{31:36,33:$V8}),{7:37,24:$V0,28:6,29:$V1},{16:[1,38]},{16:[2,19]},{30:[1,39]},o($V2,[2,14]),{30:[1,40]},o($Va,[2,17]),{17:41,24:$Vb},{7:43,24:$V0,28:6,29:$V1},{5:[1,44]},{5:[1,45]},{10:[2,5]},{5:$Vc,25:46,36:47,37:48,38:49,39:50,40:51,41:52,42:53,43:54,47:$Vd,49:$Ve,50:$Vf,54:$Vg,57:$Vh,59:$Vi},{17:62,24:$Vb},{16:[2,23],33:[1,64],35:63},{6:$V7,31:65,33:$V8},{5:$Vc,25:67,26:66,27:$Vj,36:47,37:48,38:49,39:50,40:51,41:52,42:53,43:54,47:$Vd,49:$Ve,50:$Vf,54:$Vg,57:$Vh,59:$Vi},o($Vk,[2,26]),o($Vk,[2,27]),o($Vk,[2,28]),o($Vk,[2,29]),o($Vk,[2,30]),o($Vk,[2,31]),o($Vk,[2,32]),o($Vk,[2,33]),{14:$Vl,44:[1,68]},{14:[1,70]},{14:[1,71]},{14:[1,72]},{14:[1,73]},{14:[1,74]},{5:[1,75]},{12:[2,4]},{16:[2,21]},{20:33,21:$V3,22:$V4,23:$V5,34:76},{6:[1,77]},{27:[1,78]},{5:$Vc,25:67,26:79,27:$Vj,36:47,37:48,38:49,39:50,40:51,41:52,42:53,43:54,47:$Vd,49:$Ve,50:$Vf,54:$Vg,57:$Vh,59:$Vi},{5:[1,83],14:$Vm,37:81,45:80,48:82,71:84,72:87,73:$Vn,74:$Vo,75:85,79:88,80:$Vp,81:$Vq,82:$Vr},{5:$Vs,14:$Vm,45:94,48:82,71:84,72:87,73:$Vn,74:$Vo,75:85,79:88,80:$Vp,81:$Vq,82:$Vr},{5:$Vs,14:$Vm,48:96,71:84,72:87,73:$Vn,74:$Vo,75:85,79:88,80:$Vp,81:$Vq,82:$Vr},{5:[1,97]},{5:$Vs,14:$Vm,45:99,48:82,51:98,53:$Vt,71:84,72:87,73:$Vn,74:$Vo,75:85,79:88,80:$Vp,81:$Vq,82:$Vr},{5:$Vs,14:$Vm,45:101,48:82,71:84,72:87,73:$Vn,74:$Vo,75:85,79:88,80:$Vp,81:$Vq,82:$Vr},{5:$Vs,14:$Vm,45:102,48:82,71:84,72:87,73:$Vn,74:$Vo,75:85,79:88,80:$Vp,81:$Vq,82:$Vr},{44:[1,103]},{16:[2,22]},o($V2,$V9,{20:35,32:104,21:$V3,22:$V4,23:$V5}),o([5,10,12,27,47,49,50,54,56,57,59],[2,11]),{27:[2,24]},{6:[1,105]},o($Vk,[2,35]),o($Vu,[2,52],{61:106,62:107,63:[1,108],64:[1,109],65:[1,110],66:[1,111],67:[1,112],68:[1,113],69:$Vv,70:$Vw}),o([6,63,64,65,66,67,68,69,70,73,74,77,78],$Vx,{14:$Vl}),o($Vy,[2,64],{72:116,73:$Vn,74:$Vo}),o($Vz,[2,68],{76:117,77:[1,118],78:[1,119]}),{5:$Vs,14:$Vm,45:120,48:82,71:84,72:87,73:$Vn,74:$Vo,75:85,79:88,80:$Vp,81:$Vq,82:$Vr},{5:$Vs,79:121,80:$Vp,81:$Vq,82:$Vr},o($VA,[2,73]),o($VB,[2,65]),o($VB,[2,66]),o($VA,[2,75]),o($VA,[2,76]),o($VA,[2,77]),{16:$VC,33:$VD,46:122},o($VA,$Vx),{16:[1,124]},{16:$V7,31:125,33:$V8},{16:[1,126]},{16:$VE,33:$VF,52:127},{16:$VE,33:$VF,52:129},{16:[1,130]},{16:[1,131]},{5:$Vs,14:$Vm,48:132,71:84,72:87,73:$Vn,74:$Vo,75:85,79:88,80:$Vp,81:$Vq,82:$Vr},o($V2,[2,15]),o($Vk,[2,34]),{5:$Vs,14:$Vm,48:133,71:84,72:87,73:$Vn,74:$Vo,75:85,79:88,80:$Vp,81:$Vq,82:$Vr},{5:$Vs,14:$Vm,45:134,48:82,71:84,72:87,73:$Vn,74:$Vo,75:85,79:88,80:$Vp,81:$Vq,82:$Vr},o($VB,[2,53]),o($VB,[2,54]),o($VB,[2,55]),o($VB,[2,56]),o($VB,[2,57]),o($VB,[2,58]),o($VB,[2,59]),o($VB,[2,60]),{5:$Vs,14:$Vm,48:135,71:84,72:87,73:$Vn,74:$Vo,75:85,79:88,80:$Vp,81:$Vq,82:$Vr},{5:$Vs,14:$Vm,71:136,72:87,73:$Vn,74:$Vo,75:85,79:88,80:$Vp,81:$Vq,82:$Vr},o($VB,[2,69]),o($VB,[2,70]),{16:[1,137]},o($VA,[2,72]),{16:[1,138]},{5:$Vs,14:$Vm,45:139,48:82,71:84,72:87,73:$Vn,74:$Vo,75:85,79:88,80:$Vp,81:$Vq,82:$Vr},{6:[1,140]},{16:[1,141]},{6:[1,142]},{16:[2,40]},{5:$Vs,14:$Vm,45:99,48:82,51:143,53:$Vt,71:84,72:87,73:$Vn,74:$Vo,75:85,79:88,80:$Vp,81:$Vq,82:$Vr},{16:[2,41]},{17:144,24:$Vb},{58:[1,145]},{60:[1,146]},o($Vu,[2,51],{62:147,69:$Vv,70:$Vw}),o($Vu,[2,50]),o($Vy,[2,63]),o($Vz,[2,67]),o($VA,[2,71]),{6:[1,148]},{16:$VC,33:$VD,46:149},o($Vk,[2,37]),{6:[1,150]},o($Vk,[2,39]),{16:[2,42]},o($Vk,[2,46],{55:151,56:[1,152]}),{17:153,24:$Vb},{5:$Vs,14:$Vm,48:154,71:84,72:87,73:$Vn,74:$Vo,75:85,79:88,80:$Vp,81:$Vq,82:$Vr},{5:$Vs,14:$Vm,45:155,48:82,71:84,72:87,73:$Vn,74:$Vo,75:85,79:88,80:$Vp,81:$Vq,82:$Vr},o($Vk,[2,36]),{16:[2,61]},o($Vk,[2,38]),o($Vk,[2,44]),{17:156,24:$Vb},o($Vk,[2,47]),{58:[1,157]},o($Vu,[2,49]),o($Vk,[2,45]),{17:158,24:$Vb},o($Vk,[2,48])],
defaultActions: {14:[2,2],17:[2,1],20:[2,7],32:[2,19],41:[2,5],62:[2,4],63:[2,21],76:[2,22],79:[2,24],127:[2,40],129:[2,41],143:[2,42],149:[2,61]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


import condigoInt from './generacionCodigo'
import tablaVariables from './tablaVariables'
import cuadruplo from './cuadruplos'
import mapaMemoria from './mapaMemoria'
import maquinaVirtual from './maquinaVirtual'


	
//variables usadas en jison lexer
let condigoInt = new condigoInt();

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 6;
break;
case 1:return 30;
break;
case 2:return 33;
break;
case 3:return 14;
break;
case 4:return 16;
break;
case 5:return 24;
break;
case 6:return 27;
break;
case 7:return 73;
break;
case 8:return 74;
break;
case 9:return 77;
break;
case 10:return 78;
break;
case 11:return 64;
break;
case 12:return 63;
break;
case 13:return 66;
break;
case 14:return 65;
break;
case 15:return 68;
break;
case 16:return 67;
break;
case 17:return 44;
break;
case 18:return 69;
break;
case 19:return 70;
break;
case 20:
break;
case 21:
break;
case 22:return "vars"
break;
case 23:return "program"
break;
case 24:return "read"
break;
case 25:return "write"
break;
case 26:return "function"
break;
case 27:return "return"
break;
case 28:return "int"
break;
case 29:return "float"
break;
case 30:return "char"
break;
case 31:return "void"
break;
case 32:return "print"
break;
case 33:return "if"
break;
case 34:return "else"
break;
case 35:return "for"
break;
case 36:return "to"
break;
case 37:return "do"
break;
case 38:return "while"
break;
case 39:return "main"
break;
case 40:return 5 
break;
case 41:return 81;
break;
case 42:return 80;
break;
case 43:return 82;
break;
case 44:return 53;
break;
case 45:return 10;
break;
case 46: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:!=)/,/^(?:==)/,/^(?:=)/,/^(?:&)/,/^(?:\|)/,/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:vars\b)/,/^(?:program\b)/,/^(?:read\b)/,/^(?:write\b)/,/^(?:function\b)/,/^(?:return\b)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:char\b)/,/^(?:void\b)/,/^(?:print\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:to\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:main\b)/,/^(?:[a-zA-Z][a-zA-Z_0-9]*\b)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:'[a-zA-Z]')/,/^(?:"(\\.|[^\"])*")/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = mrLike;
exports.Parser = mrLike.Parser;
exports.parse = function () { return mrLike.parse.apply(mrLike, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}